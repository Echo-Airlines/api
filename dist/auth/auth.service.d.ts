import { DatabaseService } from '@database/database.service';
import { AuthUser } from '@user/dto/PublicUser.dto';
import { UserProfileDto } from '@user/dto/UserProfile.dto';
import { InviteCode, Prisma } from 'prisma/generated/prisma';
import { HashService } from 'src/hash/hash.service';
import { JwtService } from '@nestjs/jwt';
import { ChangePasswordDto } from './dto/ChangePasswordDto';
import { RegisterUserDto } from './dto/RegisterUserDto';
import { ForgotPasswordDto } from './dto/ForgotPasswordDto';
import { EmailService } from '@email/email.service';
import { ResetPasswordDto } from './dto/ResetPasswordDto';
interface DiscordUserData {
    discordId: string;
    discordUsername: string;
    discordEmail?: string;
    discordAvatar?: string;
}
export declare class AuthService {
    private prisma;
    private hashService;
    private jwtService;
    private emailService;
    markInviteCodeAsUsed(Id: string): Promise<InviteCode>;
    constructor(prisma: DatabaseService, hashService: HashService, jwtService: JwtService, emailService: EmailService);
    private _findUserByIdentity;
    private _updateUserLastLogin;
    private _validateUser;
    me(userId: string): Promise<UserProfileDto | null>;
    validateUser(identity: string, password: string): Promise<UserProfileDto | null>;
    login(user: UserProfileDto): Promise<{
        access_token: string;
        user: UserProfileDto;
    }>;
    changePassword(body: ChangePasswordDto): Promise<UserProfileDto>;
    forgotPassword(body: ForgotPasswordDto): Promise<{
        Id: string;
        Username: string;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        Members: ({
            Company: {
                Id: string;
                CreatedAt: Date;
                UpdatedAt: Date;
                Name: string;
                WorldId: string;
                LastConnection: Date | null;
                LastReportDate: Date | null;
                Reputation: Prisma.Decimal;
                CreationDate: Date;
                DifficultyLevel: number;
                Level: number;
                LevelXP: number;
                LastRefresh: Date | null;
                AirlineCode: string;
                Paused: boolean;
            };
        } & {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            LastRefresh: Date | null;
            IsActive: boolean;
            DeactivatedAt: Date | null;
            VAId: string;
            VARoleId: string;
            TotalCargosTransportedLbs: number;
            TotalPAXsTransported: number;
            TotalEarnedCredits: Prisma.Decimal;
            TotalSpentCredits: Prisma.Decimal;
            NumberOfFlights: number;
            FlightHours: Prisma.Decimal;
            Color: string;
            ReputationImpact: Prisma.Decimal;
            LastVAFlightDate: Date | null;
            UserId: string | null;
            CompanyId: string;
        })[];
        Roles: {
            Id: number;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            Description: string | null;
            Slug: string;
            VirtualAirlineRoleId: string | null;
        }[];
        PrivacySettings: {
            Id: string;
            CreatedAt: Date;
            UserId: string;
            ShowOnlineStatus: boolean;
            ShowFirstName: boolean;
            ShowLastName: boolean;
            ShowLastNameInitial: boolean;
            ShowLastLogin: boolean;
        }[];
    }>;
    createUser(body: RegisterUserDto): Promise<UserProfileDto>;
    findUserByDiscordId(discordId: string): Promise<AuthUser | null>;
    createUserFromDiscord(discordData: DiscordUserData): Promise<AuthUser>;
    updateUserDiscordInfo(userId: string, discordData: Omit<DiscordUserData, 'discordId'>): Promise<AuthUser>;
    getInviteCode(code: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Code: string;
        IsUsed: boolean;
        UsedAt: Date | null;
    } | null>;
    getUserByUsername(username: string): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    } | null>;
    getUserByEmail(email: string): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    } | null>;
    resetPassword(body: ResetPasswordDto): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
}
export {};
