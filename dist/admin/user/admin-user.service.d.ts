import { PrismaService } from '@prisma/prisma.service';
import { Prisma } from 'prisma/generated/prisma';
export declare class AdminUserService {
    private prisma;
    constructor(prisma: PrismaService);
    findAll(query?: Prisma.UserFindManyArgs): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }[]>;
    findOne(query: Prisma.UserFindUniqueArgs): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    } | null>;
    create(data: Prisma.UserCreateInput, query?: Partial<Prisma.UserCreateArgs>): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    update(Id: string, data: Prisma.UserUpdateInput, query?: Partial<Prisma.UserUpdateArgs>): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    updateByUsername(Username: string, data: Prisma.UserUpdateInput, query?: Partial<Prisma.UserUpdateArgs>): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    deleteOneById(Id: string): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    assignRoleToUser(UserId: string, roleSlug: string): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    unassignRoleFromUser(UserId: string, roleSlug: string): Promise<{
        Id: string;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    findAllRoles(): Promise<({
        VirtualAirlineRole: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            LastRefresh: Date | null;
            VAId: string;
            Color: string;
            Permission: number;
            IsDefaultNewRole: boolean;
            PayPercent: Prisma.Decimal;
            IsHidden: boolean;
            RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
            RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
            PayWeekly: Prisma.Decimal;
            PayPerFlightHour: Prisma.Decimal;
        } | null;
    } & {
        Id: number;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        Slug: string;
        VirtualAirlineRoleId: string | null;
    })[]>;
    getRoleBySlug(slug: string): Promise<({
        VirtualAirlineRole: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            LastRefresh: Date | null;
            VAId: string;
            Color: string;
            Permission: number;
            IsDefaultNewRole: boolean;
            PayPercent: Prisma.Decimal;
            IsHidden: boolean;
            RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
            RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
            PayWeekly: Prisma.Decimal;
            PayPerFlightHour: Prisma.Decimal;
        } | null;
    } & {
        Id: number;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        Slug: string;
        VirtualAirlineRoleId: string | null;
    }) | null>;
    findManyInviteCodes(query?: Prisma.InviteCodeFindManyArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Code: string;
        IsUsed: boolean;
        UsedAt: Date | null;
    }[]>;
    findOneInviteCode(query: Prisma.InviteCodeFindUniqueArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Code: string;
        IsUsed: boolean;
        UsedAt: Date | null;
    } | null>;
    createInviteCode(): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Code: string;
        IsUsed: boolean;
        UsedAt: Date | null;
    }>;
    createInviteCodes(quantity: number): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Code: string;
        IsUsed: boolean;
        UsedAt: Date | null;
    }[]>;
    updateInviteCode(Id: string, data: Prisma.InviteCodeUpdateInput): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Code: string;
        IsUsed: boolean;
        UsedAt: Date | null;
    }>;
    deleteInviteCode(Id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Code: string;
        IsUsed: boolean;
        UsedAt: Date | null;
    }>;
    linkRoleToVirtualAirlineRole(Id: number, virtualAirlineRoleId: string): Promise<{
        Id: number;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        Slug: string;
        VirtualAirlineRoleId: string | null;
    }>;
}
