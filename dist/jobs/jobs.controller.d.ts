import { JobsService } from './jobs.service';
import { JobSchedulerService } from './job-scheduler.service';
import { CreateJobDto } from './dto/create-job.dto';
import { UpdateJobDto } from './dto/update-job.dto';
import { JobStatus } from 'prisma/generated/prisma';
export declare class JobsController {
    private readonly jobsService;
    private readonly jobSchedulerService;
    constructor(jobsService: JobsService, jobSchedulerService: JobSchedulerService);
    create(createJobDto: CreateJobDto): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    findValidIntervals(): Promise<{
        Label: string;
        Key: any;
        Value: any;
    }[]>;
    findAll(): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }[]>;
    findOneById(id: string): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    } | null>;
    update(id: string, updateJobDto: UpdateJobDto): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    remove(id: string): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    } | null>;
    updateStatus(id: string, status: JobStatus): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    } | null>;
    enable(id: string): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    disable(id: string): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: import("prisma/generated/prisma").$Enums.JobType;
        Status: import("prisma/generated/prisma").$Enums.JobStatus;
        CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
        Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    execute(id: string): Promise<{
        success: boolean;
        message: string;
        duration: number;
        nextRunAt: Date;
        job: {
            Id: string;
            Name: string;
            Description: string | null;
            CreatedAt: Date;
            UpdatedAt: Date;
            IsEnabled: boolean;
            FirstRunCompleted: boolean;
            Type: import("prisma/generated/prisma").$Enums.JobType;
            Status: import("prisma/generated/prisma").$Enums.JobStatus;
            CronExpression: import("prisma/generated/prisma").$Enums.CronExpression;
            Parameters: import("prisma/generated/prisma/runtime/library").JsonValue | null;
            LastRunAt: Date | null;
            NextRunAt: Date | null;
            LastError: string | null;
            ExecutionCount: number;
        };
    } | {
        success: boolean;
        message: string;
        duration?: undefined;
        nextRunAt?: undefined;
        job?: undefined;
    } | undefined>;
}
