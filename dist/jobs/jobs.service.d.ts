import { CronExpression } from '@nestjs/schedule';
import { PrismaService } from '@prisma/prisma.service';
import { $Enums, JobStatus, type Prisma } from 'prisma/generated/prisma';
import { CreateJobDto } from './dto/create-job.dto';
import { UpdateJobDto } from './dto/update-job.dto';
export type CronInterval = {
    Label: string;
    Key: keyof typeof CronExpression;
    Value: CronExpression;
};
export declare class JobsService {
    private prisma;
    private readonly logger;
    constructor(prisma: PrismaService);
    create(dto: CreateJobDto): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    findAll(): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }[]>;
    findAllEnabled(): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }[]>;
    findOneById(id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    } | null>;
    update(id: string, dto: UpdateJobDto): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    setFirstRunCompleted(Id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    remove(id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    } | null>;
    updateStatus(id: string, status: JobStatus): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    } | null>;
    updateLastRun(id: string, lastRunAt: Date, nextRunAt: Date, error?: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        Description: string | null;
        IsEnabled: boolean;
        FirstRunCompleted: boolean;
        Type: $Enums.JobType;
        Status: $Enums.JobStatus;
        CronExpression: $Enums.CronExpression;
        Parameters: Prisma.JsonValue | null;
        LastRunAt: Date | null;
        NextRunAt: Date | null;
        LastError: string | null;
        ExecutionCount: number;
    }>;
    formatCronLabel(cronExpression: CronExpression): string;
    findValidIntervals(): Promise<{
        Label: string;
        Key: any;
        Value: any;
    }[]>;
}
