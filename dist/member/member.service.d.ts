import { DatabaseService } from '@database/database.service';
import { Prisma } from 'prisma/generated/prisma';
export declare class MemberService {
    private readonly prisma;
    constructor(prisma: DatabaseService);
    findAllActive(): Promise<{
        Id: string;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        LastRefresh: Date | null;
        UserId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        CompanyId: string;
    }[]>;
    findByCompanyId(companyId: string): Promise<({
        Company: {
            Id: string;
            LastRefresh: Date | null;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            AirlineCode: string;
            CreationDate: Date;
            Level: number;
            LevelXP: number;
            Reputation: Prisma.Decimal;
            Paused: boolean;
            LastConnection: Date | null;
            LastReportDate: Date | null;
            DifficultyLevel: number;
            WorldId: string;
        };
        User: {
            Id: string;
            Username: string;
            FirstName: string | null;
            LastName: string | null;
            PrivacySettings: {
                Id: string;
                UserId: string;
                CreatedAt: Date;
                ShowOnlineStatus: boolean;
                ShowFirstName: boolean;
                ShowLastName: boolean;
                ShowLastNameInitial: boolean;
                ShowLastLogin: boolean;
            }[];
        } | null;
    } & {
        Id: string;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        LastRefresh: Date | null;
        UserId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        CompanyId: string;
    }) | null>;
    findById(id: string, query?: Partial<Prisma.MemberFindUniqueArgs>): Promise<{
        Id: string;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        LastRefresh: Date | null;
        UserId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        CompanyId: string;
    } | null>;
    findByUserId(userId: string): Promise<({
        Company: {
            Id: string;
            LastRefresh: Date | null;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            AirlineCode: string;
            CreationDate: Date;
            Level: number;
            LevelXP: number;
            Reputation: Prisma.Decimal;
            Paused: boolean;
            LastConnection: Date | null;
            LastReportDate: Date | null;
            DifficultyLevel: number;
            WorldId: string;
        };
        User: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Username: string;
            Password: string | null;
            Email: string | null;
            FirstName: string | null;
            LastName: string | null;
            FirstLoginCompleted: boolean;
            IsOnline: boolean;
            IsBanned: boolean;
            BanReason: string | null;
            BanExpiresAt: Date | null;
            IsVerified: boolean;
            LastLogin: Date | null;
            InviteCodeId: string | null;
            WelcomeEmailSentAt: Date | null;
            ConfirmEmailToken: string | null;
            EmailVerifiedAt: Date | null;
            ResetPasswordToken: string | null;
            ResetPasswordEmailSentAt: Date | null;
            DiscordId: string | null;
            DiscordUsername: string | null;
            DiscordAvatar: string | null;
            DiscordEmail: string | null;
        } | null;
    } & {
        Id: string;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        LastRefresh: Date | null;
        UserId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        CompanyId: string;
    }) | null>;
    associateMemberToUser(memberId: string, userId: string): Promise<{
        Id: string;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        LastRefresh: Date | null;
        UserId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        CompanyId: string;
    }>;
    create(dto: Prisma.MemberCreateInput): Promise<{
        Id: string;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        LastRefresh: Date | null;
        UserId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        CompanyId: string;
    }>;
    update(Id: string, dto: Prisma.MemberUpdateInput): Promise<{
        Id: string;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        LastRefresh: Date | null;
        UserId: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        CompanyId: string;
    }>;
}
