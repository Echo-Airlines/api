import { FlightService } from '@flight/flight.service';
import { MemberService } from '@member/member.service';
import { Prisma } from 'prisma/generated/prisma';
import { CreateFlightRouteDto } from './dto/create-flight-route.dto';
import { CreateFlightDto } from './dto/create-flight.dto';
export declare class FlightController {
    private readonly flightService;
    private readonly memberService;
    constructor(flightService: FlightService, memberService: MemberService);
    getNotCompletedOrCancelledFlights(aircraftIdentifier?: string, completed?: boolean): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        VAId: string | null;
        CompanyId: string;
        Registered: boolean;
        Category: number;
        ResultComments: string;
        StartTime: Date | null;
        EndTime: Date | null;
        EngineOnTime: Date | null;
        EngineOffTime: Date | null;
        AirborneTime: Date | null;
        LandedTime: Date | null;
        IntendedFlightLevel: number | null;
        Passengers: number | null;
        Cargo: number | null;
        AddedFuelQty: Prisma.Decimal | null;
        IsAI: boolean;
        VerticalSpeedAtTouchdownMpS: Prisma.Decimal | null;
        MaxGForce: Prisma.Decimal | null;
        MinGForce: Prisma.Decimal | null;
        MaxBank: Prisma.Decimal | null;
        MaxPitch: Prisma.Decimal | null;
        HasStalled: boolean;
        HasOverspeeded: boolean;
        XPFlight: number | null;
        XPFlightBonus: Prisma.Decimal | null;
        XPMissions: number | null;
        CargosTotalWeight: Prisma.Decimal | null;
        PAXCount: number | null;
        AircraftCurrentFOB: Prisma.Decimal | null;
        AircraftCurrentAltitude: Prisma.Decimal | null;
        ActualCruiseAltitude: Prisma.Decimal | null;
        ActualConsumptionAtCruiseLevelInLbsPerHour: Prisma.Decimal | null;
        ActualTotalFuelConsumptionInLbs: Prisma.Decimal | null;
        ActualConsumptionAtCruiseLevelInGalPerHour: Prisma.Decimal | null;
        ActualTASAtCruiseLevel: Prisma.Decimal | null;
        ActualCruiseTimeInMinutes: Prisma.Decimal | null;
        ActualPressureAltitude: Prisma.Decimal | null;
        RegisterState: number | null;
        WrongFuelDetected: boolean;
        WrongWeightDetected: boolean;
        TimeOffset: Prisma.Decimal | null;
        StartLatitude: Prisma.Decimal | null;
        StartLongitude: Prisma.Decimal | null;
        StartHeading: Prisma.Decimal | null;
        UseFreelanceRouteSchedule: boolean;
        RestCrewAfterWarp: boolean;
        Score: Prisma.Decimal | null;
        CanResumeOrAbort: boolean;
        EngineOnRealTime: Date | null;
        EngineOffRealTime: Date | null;
        LandedRealTime: Date | null;
        AirborneRealTime: Date | null;
        FlightStatus: import("prisma/generated/prisma").$Enums.FlightStatus;
        AircraftId: string | null;
        DepartureAirportId: string | null;
        ArrivalIntendedAirportId: string | null;
        ArrivalAlternateAirportId: string | null;
        ArrivalActualAirportId: string | null;
        MemberId: string | null;
    }[]>;
    getAllFlights(): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        VAId: string | null;
        CompanyId: string;
        Registered: boolean;
        Category: number;
        ResultComments: string;
        StartTime: Date | null;
        EndTime: Date | null;
        EngineOnTime: Date | null;
        EngineOffTime: Date | null;
        AirborneTime: Date | null;
        LandedTime: Date | null;
        IntendedFlightLevel: number | null;
        Passengers: number | null;
        Cargo: number | null;
        AddedFuelQty: Prisma.Decimal | null;
        IsAI: boolean;
        VerticalSpeedAtTouchdownMpS: Prisma.Decimal | null;
        MaxGForce: Prisma.Decimal | null;
        MinGForce: Prisma.Decimal | null;
        MaxBank: Prisma.Decimal | null;
        MaxPitch: Prisma.Decimal | null;
        HasStalled: boolean;
        HasOverspeeded: boolean;
        XPFlight: number | null;
        XPFlightBonus: Prisma.Decimal | null;
        XPMissions: number | null;
        CargosTotalWeight: Prisma.Decimal | null;
        PAXCount: number | null;
        AircraftCurrentFOB: Prisma.Decimal | null;
        AircraftCurrentAltitude: Prisma.Decimal | null;
        ActualCruiseAltitude: Prisma.Decimal | null;
        ActualConsumptionAtCruiseLevelInLbsPerHour: Prisma.Decimal | null;
        ActualTotalFuelConsumptionInLbs: Prisma.Decimal | null;
        ActualConsumptionAtCruiseLevelInGalPerHour: Prisma.Decimal | null;
        ActualTASAtCruiseLevel: Prisma.Decimal | null;
        ActualCruiseTimeInMinutes: Prisma.Decimal | null;
        ActualPressureAltitude: Prisma.Decimal | null;
        RegisterState: number | null;
        WrongFuelDetected: boolean;
        WrongWeightDetected: boolean;
        TimeOffset: Prisma.Decimal | null;
        StartLatitude: Prisma.Decimal | null;
        StartLongitude: Prisma.Decimal | null;
        StartHeading: Prisma.Decimal | null;
        UseFreelanceRouteSchedule: boolean;
        RestCrewAfterWarp: boolean;
        Score: Prisma.Decimal | null;
        CanResumeOrAbort: boolean;
        EngineOnRealTime: Date | null;
        EngineOffRealTime: Date | null;
        LandedRealTime: Date | null;
        AirborneRealTime: Date | null;
        FlightStatus: import("prisma/generated/prisma").$Enums.FlightStatus;
        AircraftId: string | null;
        DepartureAirportId: string | null;
        ArrivalIntendedAirportId: string | null;
        ArrivalAlternateAirportId: string | null;
        ArrivalActualAirportId: string | null;
        MemberId: string | null;
    }[]>;
    createFlight(body: CreateFlightDto): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        VAId: string | null;
        CompanyId: string;
        Registered: boolean;
        Category: number;
        ResultComments: string;
        StartTime: Date | null;
        EndTime: Date | null;
        EngineOnTime: Date | null;
        EngineOffTime: Date | null;
        AirborneTime: Date | null;
        LandedTime: Date | null;
        IntendedFlightLevel: number | null;
        Passengers: number | null;
        Cargo: number | null;
        AddedFuelQty: Prisma.Decimal | null;
        IsAI: boolean;
        VerticalSpeedAtTouchdownMpS: Prisma.Decimal | null;
        MaxGForce: Prisma.Decimal | null;
        MinGForce: Prisma.Decimal | null;
        MaxBank: Prisma.Decimal | null;
        MaxPitch: Prisma.Decimal | null;
        HasStalled: boolean;
        HasOverspeeded: boolean;
        XPFlight: number | null;
        XPFlightBonus: Prisma.Decimal | null;
        XPMissions: number | null;
        CargosTotalWeight: Prisma.Decimal | null;
        PAXCount: number | null;
        AircraftCurrentFOB: Prisma.Decimal | null;
        AircraftCurrentAltitude: Prisma.Decimal | null;
        ActualCruiseAltitude: Prisma.Decimal | null;
        ActualConsumptionAtCruiseLevelInLbsPerHour: Prisma.Decimal | null;
        ActualTotalFuelConsumptionInLbs: Prisma.Decimal | null;
        ActualConsumptionAtCruiseLevelInGalPerHour: Prisma.Decimal | null;
        ActualTASAtCruiseLevel: Prisma.Decimal | null;
        ActualCruiseTimeInMinutes: Prisma.Decimal | null;
        ActualPressureAltitude: Prisma.Decimal | null;
        RegisterState: number | null;
        WrongFuelDetected: boolean;
        WrongWeightDetected: boolean;
        TimeOffset: Prisma.Decimal | null;
        StartLatitude: Prisma.Decimal | null;
        StartLongitude: Prisma.Decimal | null;
        StartHeading: Prisma.Decimal | null;
        UseFreelanceRouteSchedule: boolean;
        RestCrewAfterWarp: boolean;
        Score: Prisma.Decimal | null;
        CanResumeOrAbort: boolean;
        EngineOnRealTime: Date | null;
        EngineOffRealTime: Date | null;
        LandedRealTime: Date | null;
        AirborneRealTime: Date | null;
        FlightStatus: import("prisma/generated/prisma").$Enums.FlightStatus;
        AircraftId: string | null;
        DepartureAirportId: string | null;
        ArrivalIntendedAirportId: string | null;
        ArrivalAlternateAirportId: string | null;
        ArrivalActualAirportId: string | null;
        MemberId: string | null;
    }>;
    getMyFlights(req: any, completed?: boolean): Promise<{
        error: string;
        flights: never[];
        success: boolean;
    } | {
        flights: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            LastRefresh: Date | null;
            VAId: string | null;
            CompanyId: string;
            Registered: boolean;
            Category: number;
            ResultComments: string;
            StartTime: Date | null;
            EndTime: Date | null;
            EngineOnTime: Date | null;
            EngineOffTime: Date | null;
            AirborneTime: Date | null;
            LandedTime: Date | null;
            IntendedFlightLevel: number | null;
            Passengers: number | null;
            Cargo: number | null;
            AddedFuelQty: Prisma.Decimal | null;
            IsAI: boolean;
            VerticalSpeedAtTouchdownMpS: Prisma.Decimal | null;
            MaxGForce: Prisma.Decimal | null;
            MinGForce: Prisma.Decimal | null;
            MaxBank: Prisma.Decimal | null;
            MaxPitch: Prisma.Decimal | null;
            HasStalled: boolean;
            HasOverspeeded: boolean;
            XPFlight: number | null;
            XPFlightBonus: Prisma.Decimal | null;
            XPMissions: number | null;
            CargosTotalWeight: Prisma.Decimal | null;
            PAXCount: number | null;
            AircraftCurrentFOB: Prisma.Decimal | null;
            AircraftCurrentAltitude: Prisma.Decimal | null;
            ActualCruiseAltitude: Prisma.Decimal | null;
            ActualConsumptionAtCruiseLevelInLbsPerHour: Prisma.Decimal | null;
            ActualTotalFuelConsumptionInLbs: Prisma.Decimal | null;
            ActualConsumptionAtCruiseLevelInGalPerHour: Prisma.Decimal | null;
            ActualTASAtCruiseLevel: Prisma.Decimal | null;
            ActualCruiseTimeInMinutes: Prisma.Decimal | null;
            ActualPressureAltitude: Prisma.Decimal | null;
            RegisterState: number | null;
            WrongFuelDetected: boolean;
            WrongWeightDetected: boolean;
            TimeOffset: Prisma.Decimal | null;
            StartLatitude: Prisma.Decimal | null;
            StartLongitude: Prisma.Decimal | null;
            StartHeading: Prisma.Decimal | null;
            UseFreelanceRouteSchedule: boolean;
            RestCrewAfterWarp: boolean;
            Score: Prisma.Decimal | null;
            CanResumeOrAbort: boolean;
            EngineOnRealTime: Date | null;
            EngineOffRealTime: Date | null;
            LandedRealTime: Date | null;
            AirborneRealTime: Date | null;
            FlightStatus: import("prisma/generated/prisma").$Enums.FlightStatus;
            AircraftId: string | null;
            DepartureAirportId: string | null;
            ArrivalIntendedAirportId: string | null;
            ArrivalAlternateAirportId: string | null;
            ArrivalActualAirportId: string | null;
            MemberId: string | null;
        }[];
        success: boolean;
        error: null;
    }>;
    getMyFlightRoutes(req: any): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        MemberId: string;
        FlightId: string | null;
        Route: string;
    }[]>;
    getFlightRoutes(flightId: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        MemberId: string;
        FlightId: string | null;
        Route: string;
    }[]>;
    createFlightRoute(body: CreateFlightRouteDto): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        MemberId: string;
        FlightId: string | null;
        Route: string;
    }>;
}
