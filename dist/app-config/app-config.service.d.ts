import { DatabaseService } from '@database/database.service';
import { AppConfig, Prisma } from 'prisma/generated/prisma';
export declare class AppConfigService {
    private prisma;
    constructor(prisma: DatabaseService);
    create(dto: AppConfig): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }>;
    findOne(query: Prisma.AppConfigWhereInput): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }>;
    findMany(query: Prisma.AppConfigFindManyArgs): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }[]>;
    getLatest(): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    } | null>;
    update(query: Prisma.AppConfigWhereInput, dto: AppConfig): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }>;
    upsert(dto: AppConfig): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }>;
    delete(query: Prisma.AppConfigWhereInput): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }>;
    setVirtualAirlineInitiated(VirtualAirlineInitiated: boolean): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }>;
    Livery_findAll(): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        IsActive: boolean;
        AircraftId: string | null;
        DownloadCount: number;
        Image: string;
        ImageFileName: string | null;
        CoverPhoto: string | null;
        Metadata: Prisma.JsonValue | null;
        Url: string | null;
        Description: string | null;
        DownloadUrl: string | null;
    }[]>;
    Livery_findAllActive(): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        IsActive: boolean;
        AircraftId: string | null;
        DownloadCount: number;
        Image: string;
        ImageFileName: string | null;
        CoverPhoto: string | null;
        Metadata: Prisma.JsonValue | null;
        Url: string | null;
        Description: string | null;
        DownloadUrl: string | null;
    }[]>;
    Livery_findOneById(id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        IsActive: boolean;
        AircraftId: string | null;
        DownloadCount: number;
        Image: string;
        ImageFileName: string | null;
        CoverPhoto: string | null;
        Metadata: Prisma.JsonValue | null;
        Url: string | null;
        Description: string | null;
        DownloadUrl: string | null;
    }>;
    Livery_findMany(query: Prisma.LiveryFindManyArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        IsActive: boolean;
        AircraftId: string | null;
        DownloadCount: number;
        Image: string;
        ImageFileName: string | null;
        CoverPhoto: string | null;
        Metadata: Prisma.JsonValue | null;
        Url: string | null;
        Description: string | null;
        DownloadUrl: string | null;
    }[]>;
    Livery_findOne(query: Prisma.LiveryFindFirstArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        IsActive: boolean;
        AircraftId: string | null;
        DownloadCount: number;
        Image: string;
        ImageFileName: string | null;
        CoverPhoto: string | null;
        Metadata: Prisma.JsonValue | null;
        Url: string | null;
        Description: string | null;
        DownloadUrl: string | null;
    }>;
    Livery_incrementDownloadCount(id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        IsActive: boolean;
        AircraftId: string | null;
        DownloadCount: number;
        Image: string;
        ImageFileName: string | null;
        CoverPhoto: string | null;
        Metadata: Prisma.JsonValue | null;
        Url: string | null;
        Description: string | null;
        DownloadUrl: string | null;
    }>;
    updateDiscordConfig(config: {
        DiscordClientId?: string;
        DiscordClientSecret?: string;
        DiscordCallbackUrl?: string;
        DiscordAuthEnabled?: boolean;
    }): Promise<{
        Id: number;
        OnAirSyncEnabled: boolean;
        OnAirVASyncEnabled: boolean;
        OnAirVAMembersSyncEnabled: boolean;
        OnAirCompanySyncEnabled: boolean;
        DiscordServerInviteLink: string | null;
        DiscordServerInviteLinkEnabled: boolean;
        AcceptingNewMembers: boolean;
        DiscordAuthEnabled: boolean;
        DiscordAuthCreateUser: boolean;
        LocalAuthEnabled: boolean;
        VirtualAirlineInitiated: boolean;
        FSHubApiKey: string;
        CreatedAt: Date;
        UpdatedAt: Date;
    }>;
    getDiscordConfig(): Promise<{
        DiscordAuthEnabled: boolean;
    } | null>;
}
