import { DatabaseService } from '@database/database.service';
import { Prisma } from 'prisma/generated/prisma';
import { PublicUserDto } from './dto/PublicUser.dto';
import { UserProfileDto } from './dto/UserProfile.dto';
export declare class UserService {
    private prisma;
    constructor(prisma: DatabaseService);
    me(userId: string): Promise<UserProfileDto | null>;
    findAllActive(): Promise<PublicUserDto[]>;
    findUserById(Id: string): Promise<PublicUserDto | null>;
    findUserByUsername(username: string): Promise<PublicUserDto>;
    setUserFirstLoginCompleted(UserId: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    updateById(Id: string, data: Prisma.UserUpdateInput): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Username: string;
        Password: string | null;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        InviteCodeId: string | null;
        WelcomeEmailSentAt: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        ResetPasswordToken: string | null;
        ResetPasswordEmailSentAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
    }>;
    confirmEmail(token: string): Promise<{
        Id: string;
        Username: string;
        Email: string | null;
        FirstName: string | null;
        LastName: string | null;
        FirstLoginCompleted: boolean;
        IsOnline: boolean;
        IsBanned: boolean;
        BanReason: string | null;
        BanExpiresAt: Date | null;
        IsVerified: boolean;
        LastLogin: Date | null;
        ConfirmEmailToken: string | null;
        EmailVerifiedAt: Date | null;
        DiscordId: string | null;
        DiscordUsername: string | null;
        DiscordAvatar: string | null;
        DiscordEmail: string | null;
        Roles: {
            Id: number;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            Description: string | null;
            Slug: string;
            VirtualAirlineRoleId: string | null;
        }[];
        PrivacySettings: {
            Id: string;
            UserId: string;
            CreatedAt: Date;
            ShowOnlineStatus: boolean;
            ShowFirstName: boolean;
            ShowLastName: boolean;
            ShowLastNameInitial: boolean;
            ShowLastLogin: boolean;
        }[];
        Members: {
            Id: string;
            IsActive: boolean;
            DeactivatedAt: Date | null;
            VAId: string;
            VARoleId: string;
            TotalCargosTransportedLbs: number;
            TotalPAXsTransported: number;
            TotalEarnedCredits: Prisma.Decimal;
            TotalSpentCredits: Prisma.Decimal;
            NumberOfFlights: number;
            FlightHours: Prisma.Decimal;
            Color: string;
            ReputationImpact: Prisma.Decimal;
            LastVAFlightDate: Date | null;
            LastRefresh: Date | null;
            UserId: string | null;
            CreatedAt: Date;
            UpdatedAt: Date;
            CompanyId: string;
        }[];
        InviteCode: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Code: string;
            IsUsed: boolean;
            UsedAt: Date | null;
        } | null;
    }>;
}
