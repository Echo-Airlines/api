import { OnAirApiService } from '@on-air/on-air-api.service';
import { DatabaseService } from '@database/database.service';
import { Prisma } from 'prisma/generated/prisma';
export declare class AirportService {
    private prisma;
    private onAirApiService;
    constructor(prisma: DatabaseService, onAirApiService: OnAirApiService);
    findAll(include?: Prisma.AirportInclude): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        ICAO: string;
        IATA: string | null;
        Size: number;
        City: string | null;
        State: string | null;
        CountryCode: string | null;
        CountryName: string | null;
        CountryEmoji: string | null;
        Latitude: Prisma.Decimal;
        Longitude: Prisma.Decimal;
        HomeWebSiteUrl: string | null;
        WikiUrl: string | null;
    }[]>;
    findById(id: string, include?: Prisma.AirportInclude): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        ICAO: string;
        IATA: string | null;
        Size: number;
        City: string | null;
        State: string | null;
        CountryCode: string | null;
        CountryName: string | null;
        CountryEmoji: string | null;
        Latitude: Prisma.Decimal;
        Longitude: Prisma.Decimal;
        HomeWebSiteUrl: string | null;
        WikiUrl: string | null;
    } | null>;
    findByICAO(ICAO: string, include?: Prisma.AirportInclude): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        ICAO: string;
        IATA: string | null;
        Size: number;
        City: string | null;
        State: string | null;
        CountryCode: string | null;
        CountryName: string | null;
        CountryEmoji: string | null;
        Latitude: Prisma.Decimal;
        Longitude: Prisma.Decimal;
        HomeWebSiteUrl: string | null;
        WikiUrl: string | null;
    } | null>;
    findByIATA(IATA: string, include?: Prisma.AirportInclude): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        ICAO: string;
        IATA: string | null;
        Size: number;
        City: string | null;
        State: string | null;
        CountryCode: string | null;
        CountryName: string | null;
        CountryEmoji: string | null;
        Latitude: Prisma.Decimal;
        Longitude: Prisma.Decimal;
        HomeWebSiteUrl: string | null;
        WikiUrl: string | null;
    } | null>;
    create(dto: Prisma.AirportCreateInput, include?: Prisma.AirportInclude): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        ICAO: string;
        IATA: string | null;
        Size: number;
        City: string | null;
        State: string | null;
        CountryCode: string | null;
        CountryName: string | null;
        CountryEmoji: string | null;
        Latitude: Prisma.Decimal;
        Longitude: Prisma.Decimal;
        HomeWebSiteUrl: string | null;
        WikiUrl: string | null;
    }>;
    upsert(dto: Prisma.AirportCreateInput, include?: Prisma.AirportInclude): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        ICAO: string;
        IATA: string | null;
        Size: number;
        City: string | null;
        State: string | null;
        CountryCode: string | null;
        CountryName: string | null;
        CountryEmoji: string | null;
        Latitude: Prisma.Decimal;
        Longitude: Prisma.Decimal;
        HomeWebSiteUrl: string | null;
        WikiUrl: string | null;
    }>;
    lookupByICAO(ICAO: string, include?: Prisma.AirportInclude): Promise<{
        Id: string;
        Name: string;
        Description: string | null;
        CreatedAt: Date;
        UpdatedAt: Date;
        ICAO: string;
        IATA: string | null;
        Size: number;
        City: string | null;
        State: string | null;
        CountryCode: string | null;
        CountryName: string | null;
        CountryEmoji: string | null;
        Latitude: Prisma.Decimal;
        Longitude: Prisma.Decimal;
        HomeWebSiteUrl: string | null;
        WikiUrl: string | null;
    } | null>;
    determineCountryEmoji(countryCode: string): any;
}
