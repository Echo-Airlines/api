import { PrismaService } from '@prisma/prisma.service';
import { Prisma } from 'prisma/generated/prisma';
export declare class VirtualAirlineService {
    private prisma;
    constructor(prisma: PrismaService);
    findAll(query?: Prisma.VirtualAirlineFindManyArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        ApiKey: string;
        IsPrimary: boolean;
        Identifier: string | null;
        Name: string | null;
        Description: string | null;
        WorldId: string | null;
        LastDividendsDistribution: Date | null;
        LastComputationDate: Date | null;
        ComputedMemberCount: number | null;
        ComputedAircraftsCount: number | null;
        ComputedNumberOfFlights30Days: number | null;
        ComputedNumberOfFlightHours30Days: number | null;
        ComputedMostUsedAirports: string | null;
        LastConnection: Date | null;
        LastReportDate: Date | null;
        Reputation: Prisma.Decimal | null;
        CreationDate: Date | null;
        DifficultyLevel: number | null;
        Level: number | null;
        LevelXP: number | null;
        TotalContractsCompleted: number | null;
        TotalContractsEarnedCredits: number | null;
        LastRefresh: Date | null;
    }[]>;
    getPrimaryVirtualAirline(query?: Prisma.VirtualAirlineFindFirstArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        ApiKey: string;
        IsPrimary: boolean;
        Identifier: string | null;
        Name: string | null;
        Description: string | null;
        WorldId: string | null;
        LastDividendsDistribution: Date | null;
        LastComputationDate: Date | null;
        ComputedMemberCount: number | null;
        ComputedAircraftsCount: number | null;
        ComputedNumberOfFlights30Days: number | null;
        ComputedNumberOfFlightHours30Days: number | null;
        ComputedMostUsedAirports: string | null;
        LastConnection: Date | null;
        LastReportDate: Date | null;
        Reputation: Prisma.Decimal | null;
        CreationDate: Date | null;
        DifficultyLevel: number | null;
        Level: number | null;
        LevelXP: number | null;
        TotalContractsCompleted: number | null;
        TotalContractsEarnedCredits: number | null;
        LastRefresh: Date | null;
    } | null>;
    getPrimaryLeaderboard(sortColumn?: 'reputation' | 'flights' | 'hours' | 'earnings'): Promise<({
        Company: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            WorldId: string;
            LastConnection: Date | null;
            LastReportDate: Date | null;
            Reputation: Prisma.Decimal;
            CreationDate: Date;
            DifficultyLevel: number;
            Level: number;
            LevelXP: number;
            LastRefresh: Date | null;
            AirlineCode: string;
            Paused: boolean;
        };
        VARole: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            LastRefresh: Date | null;
            VAId: string;
            Color: string;
            Permission: number;
            IsDefaultNewRole: boolean;
            PayPercent: Prisma.Decimal;
            IsHidden: boolean;
            RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
            RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
            PayWeekly: Prisma.Decimal;
            PayPerFlightHour: Prisma.Decimal;
        };
    } & {
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        UserId: string | null;
        CompanyId: string;
    })[]>;
    getPrimaryVirtualAirlineMembers(): Promise<({
        Company: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            WorldId: string;
            LastConnection: Date | null;
            LastReportDate: Date | null;
            Reputation: Prisma.Decimal;
            CreationDate: Date;
            DifficultyLevel: number;
            Level: number;
            LevelXP: number;
            LastRefresh: Date | null;
            AirlineCode: string;
            Paused: boolean;
        };
        VARole: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            LastRefresh: Date | null;
            VAId: string;
            Color: string;
            Permission: number;
            IsDefaultNewRole: boolean;
            PayPercent: Prisma.Decimal;
            IsHidden: boolean;
            RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
            RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
            PayWeekly: Prisma.Decimal;
            PayPerFlightHour: Prisma.Decimal;
        };
    } & {
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        UserId: string | null;
        CompanyId: string;
    })[]>;
    getVirtualAirlineById(Id: string, query?: Prisma.VirtualAirlineFindUniqueArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        ApiKey: string;
        IsPrimary: boolean;
        Identifier: string | null;
        Name: string | null;
        Description: string | null;
        WorldId: string | null;
        LastDividendsDistribution: Date | null;
        LastComputationDate: Date | null;
        ComputedMemberCount: number | null;
        ComputedAircraftsCount: number | null;
        ComputedNumberOfFlights30Days: number | null;
        ComputedNumberOfFlightHours30Days: number | null;
        ComputedMostUsedAirports: string | null;
        LastConnection: Date | null;
        LastReportDate: Date | null;
        Reputation: Prisma.Decimal | null;
        CreationDate: Date | null;
        DifficultyLevel: number | null;
        Level: number | null;
        LevelXP: number | null;
        TotalContractsCompleted: number | null;
        TotalContractsEarnedCredits: number | null;
        LastRefresh: Date | null;
    }>;
    getVirtualAirlineByIdentifier(Identifier: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        ApiKey: string;
        IsPrimary: boolean;
        Identifier: string | null;
        Name: string | null;
        Description: string | null;
        WorldId: string | null;
        LastDividendsDistribution: Date | null;
        LastComputationDate: Date | null;
        ComputedMemberCount: number | null;
        ComputedAircraftsCount: number | null;
        ComputedNumberOfFlights30Days: number | null;
        ComputedNumberOfFlightHours30Days: number | null;
        ComputedMostUsedAirports: string | null;
        LastConnection: Date | null;
        LastReportDate: Date | null;
        Reputation: Prisma.Decimal | null;
        CreationDate: Date | null;
        DifficultyLevel: number | null;
        Level: number | null;
        LevelXP: number | null;
        TotalContractsCompleted: number | null;
        TotalContractsEarnedCredits: number | null;
        LastRefresh: Date | null;
    }>;
    upsertById(virtualAirline: Prisma.VirtualAirlineCreateInput): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        ApiKey: string;
        IsPrimary: boolean;
        Identifier: string | null;
        Name: string | null;
        Description: string | null;
        WorldId: string | null;
        LastDividendsDistribution: Date | null;
        LastComputationDate: Date | null;
        ComputedMemberCount: number | null;
        ComputedAircraftsCount: number | null;
        ComputedNumberOfFlights30Days: number | null;
        ComputedNumberOfFlightHours30Days: number | null;
        ComputedMostUsedAirports: string | null;
        LastConnection: Date | null;
        LastReportDate: Date | null;
        Reputation: Prisma.Decimal | null;
        CreationDate: Date | null;
        DifficultyLevel: number | null;
        Level: number | null;
        LevelXP: number | null;
        TotalContractsCompleted: number | null;
        TotalContractsEarnedCredits: number | null;
        LastRefresh: Date | null;
    }>;
    upsertByIdentifier(virtualAirline: Prisma.VirtualAirlineCreateInput): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        ApiKey: string;
        IsPrimary: boolean;
        Identifier: string | null;
        Name: string | null;
        Description: string | null;
        WorldId: string | null;
        LastDividendsDistribution: Date | null;
        LastComputationDate: Date | null;
        ComputedMemberCount: number | null;
        ComputedAircraftsCount: number | null;
        ComputedNumberOfFlights30Days: number | null;
        ComputedNumberOfFlightHours30Days: number | null;
        ComputedMostUsedAirports: string | null;
        LastConnection: Date | null;
        LastReportDate: Date | null;
        Reputation: Prisma.Decimal | null;
        CreationDate: Date | null;
        DifficultyLevel: number | null;
        Level: number | null;
        LevelXP: number | null;
        TotalContractsCompleted: number | null;
        TotalContractsEarnedCredits: number | null;
        LastRefresh: Date | null;
    }>;
    create(virtualAirline: Prisma.VirtualAirlineCreateInput): Promise<{
        World: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            Description: string | null;
            Slug: string;
        } | null;
    } & {
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        ApiKey: string;
        IsPrimary: boolean;
        Identifier: string | null;
        Name: string | null;
        Description: string | null;
        WorldId: string | null;
        LastDividendsDistribution: Date | null;
        LastComputationDate: Date | null;
        ComputedMemberCount: number | null;
        ComputedAircraftsCount: number | null;
        ComputedNumberOfFlights30Days: number | null;
        ComputedNumberOfFlightHours30Days: number | null;
        ComputedMostUsedAirports: string | null;
        LastConnection: Date | null;
        LastReportDate: Date | null;
        Reputation: Prisma.Decimal | null;
        CreationDate: Date | null;
        DifficultyLevel: number | null;
        Level: number | null;
        LevelXP: number | null;
        TotalContractsCompleted: number | null;
        TotalContractsEarnedCredits: number | null;
        LastRefresh: Date | null;
    }>;
    getVARoles(): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        LastRefresh: Date | null;
        VAId: string;
        Color: string;
        Permission: number;
        IsDefaultNewRole: boolean;
        PayPercent: Prisma.Decimal;
        IsHidden: boolean;
        RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
        RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
        PayWeekly: Prisma.Decimal;
        PayPerFlightHour: Prisma.Decimal;
    }[]>;
    VARole_findAll(query?: Prisma.VirtualAirlineRoleFindManyArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        LastRefresh: Date | null;
        VAId: string;
        Color: string;
        Permission: number;
        IsDefaultNewRole: boolean;
        PayPercent: Prisma.Decimal;
        IsHidden: boolean;
        RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
        RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
        PayWeekly: Prisma.Decimal;
        PayPerFlightHour: Prisma.Decimal;
    }[]>;
    VARole_findById(Id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        LastRefresh: Date | null;
        VAId: string;
        Color: string;
        Permission: number;
        IsDefaultNewRole: boolean;
        PayPercent: Prisma.Decimal;
        IsHidden: boolean;
        RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
        RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
        PayWeekly: Prisma.Decimal;
        PayPerFlightHour: Prisma.Decimal;
    } | null>;
    VARole_upsert(virtualAirlineRole: Prisma.VirtualAirlineRoleCreateInput): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        Name: string;
        LastRefresh: Date | null;
        VAId: string;
        Color: string;
        Permission: number;
        IsDefaultNewRole: boolean;
        PayPercent: Prisma.Decimal;
        IsHidden: boolean;
        RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
        RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
        PayWeekly: Prisma.Decimal;
        PayPerFlightHour: Prisma.Decimal;
    }>;
    Member_findAll(query?: Prisma.MemberFindManyArgs): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        UserId: string | null;
        CompanyId: string;
    }[]>;
    Member_findById(Id: string): Promise<{
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        UserId: string | null;
        CompanyId: string;
    } | null>;
    Member_deactivate(Id: string): Promise<{
        Company: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            WorldId: string;
            LastConnection: Date | null;
            LastReportDate: Date | null;
            Reputation: Prisma.Decimal;
            CreationDate: Date;
            DifficultyLevel: number;
            Level: number;
            LevelXP: number;
            LastRefresh: Date | null;
            AirlineCode: string;
            Paused: boolean;
        };
        VARole: {
            Id: string;
            CreatedAt: Date;
            UpdatedAt: Date;
            Name: string;
            LastRefresh: Date | null;
            VAId: string;
            Color: string;
            Permission: number;
            IsDefaultNewRole: boolean;
            PayPercent: Prisma.Decimal;
            IsHidden: boolean;
            RestrictLoadingVAJobsIntoNonVAAircraft: boolean;
            RestrictLoadingNonVAJobsIntoVAAircraft: boolean;
            PayWeekly: Prisma.Decimal;
            PayPerFlightHour: Prisma.Decimal;
        };
    } & {
        Id: string;
        CreatedAt: Date;
        UpdatedAt: Date;
        LastRefresh: Date | null;
        IsActive: boolean;
        DeactivatedAt: Date | null;
        VAId: string;
        VARoleId: string;
        TotalCargosTransportedLbs: number;
        TotalPAXsTransported: number;
        TotalEarnedCredits: Prisma.Decimal;
        TotalSpentCredits: Prisma.Decimal;
        NumberOfFlights: number;
        FlightHours: Prisma.Decimal;
        Color: string;
        ReputationImpact: Prisma.Decimal;
        LastVAFlightDate: Date | null;
        UserId: string | null;
        CompanyId: string;
    }>;
}
