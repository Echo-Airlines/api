
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AppConfigScalarFieldEnum = {
  Id: 'Id',
  OnAirSyncEnabled: 'OnAirSyncEnabled',
  OnAirVASyncEnabled: 'OnAirVASyncEnabled',
  OnAirVAMembersSyncEnabled: 'OnAirVAMembersSyncEnabled',
  OnAirCompanySyncEnabled: 'OnAirCompanySyncEnabled',
  DiscordServerInviteLink: 'DiscordServerInviteLink',
  DiscordServerInviteLinkEnabled: 'DiscordServerInviteLinkEnabled',
  AcceptingNewMembers: 'AcceptingNewMembers',
  DiscordAuthEnabled: 'DiscordAuthEnabled',
  DiscordAuthCreateUser: 'DiscordAuthCreateUser',
  LocalAuthEnabled: 'LocalAuthEnabled',
  VirtualAirlineInitiated: 'VirtualAirlineInitiated',
  FSHubApiKey: 'FSHubApiKey',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.InviteCodeScalarFieldEnum = {
  Id: 'Id',
  Code: 'Code',
  IsUsed: 'IsUsed',
  UsedAt: 'UsedAt',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.DiscordMessageScalarFieldEnum = {
  Id: 'Id',
  ChannelId: 'ChannelId',
  Content: 'Content',
  DiscordMessageTemplateId: 'DiscordMessageTemplateId',
  DiscordChannelWebhookId: 'DiscordChannelWebhookId',
  DiscordMessageSentAt: 'DiscordMessageSentAt',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.DiscordMessageTemplateScalarFieldEnum = {
  Id: 'Id',
  Slug: 'Slug',
  Name: 'Name',
  Description: 'Description',
  Content: 'Content',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.DiscordChannelWebhookScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  WebhookUrl: 'WebhookUrl',
  ChannelId: 'ChannelId',
  Token: 'Token',
  IsActive: 'IsActive',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.ListenerEventScalarFieldEnum = {
  Id: 'Id',
  Variant: 'Variant',
  Type: 'Type',
  SentAt: 'SentAt',
  Status: 'Status',
  SenderId: 'SenderId',
  Error: 'Error',
  Data: 'Data',
  DiscordMessageId: 'DiscordMessageId',
  DeliveredAt: 'DeliveredAt',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.ListenerEventSenderScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  Slug: 'Slug',
  Token: 'Token',
  IsActive: 'IsActive',
  DiscordChannelWebhookId: 'DiscordChannelWebhookId',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  Id: 'Id',
  Username: 'Username',
  Password: 'Password',
  Email: 'Email',
  FirstName: 'FirstName',
  LastName: 'LastName',
  FirstLoginCompleted: 'FirstLoginCompleted',
  IsOnline: 'IsOnline',
  IsBanned: 'IsBanned',
  BanReason: 'BanReason',
  BanExpiresAt: 'BanExpiresAt',
  IsVerified: 'IsVerified',
  LastLogin: 'LastLogin',
  InviteCodeId: 'InviteCodeId',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt',
  WelcomeEmailSentAt: 'WelcomeEmailSentAt',
  ConfirmEmailToken: 'ConfirmEmailToken',
  EmailVerifiedAt: 'EmailVerifiedAt',
  ResetPasswordToken: 'ResetPasswordToken',
  ResetPasswordEmailSentAt: 'ResetPasswordEmailSentAt',
  FSHubPilotId: 'FSHubPilotId',
  DiscordId: 'DiscordId',
  DiscordUsername: 'DiscordUsername',
  DiscordAvatar: 'DiscordAvatar',
  DiscordEmail: 'DiscordEmail'
};

exports.Prisma.UserPrivacySettingsScalarFieldEnum = {
  Id: 'Id',
  UserId: 'UserId',
  ShowOnlineStatus: 'ShowOnlineStatus',
  ShowFirstName: 'ShowFirstName',
  ShowLastName: 'ShowLastName',
  ShowLastNameInitial: 'ShowLastNameInitial',
  ShowLastLogin: 'ShowLastLogin',
  CreatedAt: 'CreatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  Slug: 'Slug',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt',
  VirtualAirlineRoleId: 'VirtualAirlineRoleId'
};

exports.Prisma.PermissionScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  Description: 'Description',
  Slug: 'Slug',
  Entity: 'Entity',
  Action: 'Action'
};

exports.Prisma.LiveryScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  IsActive: 'IsActive',
  AircraftId: 'AircraftId',
  DownloadCount: 'DownloadCount',
  Image: 'Image',
  ImageFileName: 'ImageFileName',
  CoverPhoto: 'CoverPhoto',
  Metadata: 'Metadata',
  Url: 'Url',
  Description: 'Description',
  DownloadUrl: 'DownloadUrl',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.LiveryImageScalarFieldEnum = {
  Id: 'Id',
  LiveryId: 'LiveryId',
  Name: 'Name',
  Type: 'Type',
  Path: 'Path',
  Size: 'Size',
  MimeType: 'MimeType',
  FileName: 'FileName',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.LiveryFileScalarFieldEnum = {
  Id: 'Id',
  LiveryId: 'LiveryId',
  Name: 'Name',
  Type: 'Type',
  Path: 'Path',
  Size: 'Size',
  MimeType: 'MimeType',
  FileName: 'FileName',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.VirtualAirlineScalarFieldEnum = {
  Id: 'Id',
  ApiKey: 'ApiKey',
  IsPrimary: 'IsPrimary',
  Identifier: 'Identifier',
  Name: 'Name',
  Description: 'Description',
  WorldId: 'WorldId',
  LastDividendsDistribution: 'LastDividendsDistribution',
  LastComputationDate: 'LastComputationDate',
  ComputedMemberCount: 'ComputedMemberCount',
  ComputedAircraftsCount: 'ComputedAircraftsCount',
  ComputedNumberOfFlights30Days: 'ComputedNumberOfFlights30Days',
  ComputedNumberOfFlightHours30Days: 'ComputedNumberOfFlightHours30Days',
  ComputedMostUsedAirports: 'ComputedMostUsedAirports',
  LastConnection: 'LastConnection',
  LastReportDate: 'LastReportDate',
  Reputation: 'Reputation',
  CreationDate: 'CreationDate',
  DifficultyLevel: 'DifficultyLevel',
  Level: 'Level',
  LevelXP: 'LevelXP',
  TotalContractsCompleted: 'TotalContractsCompleted',
  TotalContractsEarnedCredits: 'TotalContractsEarnedCredits',
  LastRefresh: 'LastRefresh',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt',
  VAManagerDiscordWebhookId: 'VAManagerDiscordWebhookId',
  NotifyNewMembersViaDiscord: 'NotifyNewMembersViaDiscord'
};

exports.Prisma.VirtualAirlineRoleScalarFieldEnum = {
  Id: 'Id',
  VAId: 'VAId',
  Name: 'Name',
  Permission: 'Permission',
  IsDefaultNewRole: 'IsDefaultNewRole',
  Color: 'Color',
  PayPercent: 'PayPercent',
  IsHidden: 'IsHidden',
  RestrictLoadingVAJobsIntoNonVAAircraft: 'RestrictLoadingVAJobsIntoNonVAAircraft',
  RestrictLoadingNonVAJobsIntoVAAircraft: 'RestrictLoadingNonVAJobsIntoVAAircraft',
  PayWeekly: 'PayWeekly',
  PayPerFlightHour: 'PayPerFlightHour',
  LastRefresh: 'LastRefresh',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.WorldScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  Slug: 'Slug',
  Description: 'Description',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.NotamScalarFieldEnum = {
  Id: 'Id',
  Title: 'Title',
  Content: 'Content',
  ExpirationDate: 'ExpirationDate',
  Link: 'Link',
  EffectiveDate: 'EffectiveDate',
  Status: 'Status',
  CreatedById: 'CreatedById',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.MemberScalarFieldEnum = {
  Id: 'Id',
  IsActive: 'IsActive',
  DeactivatedAt: 'DeactivatedAt',
  VAId: 'VAId',
  VARoleId: 'VARoleId',
  TotalCargosTransportedLbs: 'TotalCargosTransportedLbs',
  TotalPAXsTransported: 'TotalPAXsTransported',
  TotalEarnedCredits: 'TotalEarnedCredits',
  TotalSpentCredits: 'TotalSpentCredits',
  NumberOfFlights: 'NumberOfFlights',
  FlightHours: 'FlightHours',
  Color: 'Color',
  ReputationImpact: 'ReputationImpact',
  LastVAFlightDate: 'LastVAFlightDate',
  LastRefresh: 'LastRefresh',
  UserId: 'UserId',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt',
  CompanyId: 'CompanyId'
};

exports.Prisma.CompanyScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  AirlineCode: 'AirlineCode',
  CreationDate: 'CreationDate',
  Level: 'Level',
  LevelXP: 'LevelXP',
  Reputation: 'Reputation',
  Paused: 'Paused',
  LastConnection: 'LastConnection',
  LastReportDate: 'LastReportDate',
  DifficultyLevel: 'DifficultyLevel',
  WorldId: 'WorldId',
  LastRefresh: 'LastRefresh',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.AircraftScalarFieldEnum = {
  Id: 'Id',
  Identifier: 'Identifier',
  DisplayName: 'DisplayName',
  AircraftStatusId: 'AircraftStatusId',
  AircraftClassId: 'AircraftClassId',
  VirtualAirlineId: 'VirtualAirlineId',
  CurrentAirportId: 'CurrentAirportId',
  LastRefresh: 'LastRefresh',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.AircraftClassScalarFieldEnum = {
  Id: 'Id',
  ShortName: 'ShortName',
  Name: 'Name'
};

exports.Prisma.AircraftMaintenanceScalarFieldEnum = {
  Id: 'Id',
  AircraftId: 'AircraftId',
  AnnualCheckup: 'AnnualCheckup',
  Inspection100Hours: 'Inspection100Hours',
  FailuresRepair: 'FailuresRepair',
  AirframeRepair: 'AirframeRepair',
  AirframeReplace: 'AirframeReplace',
  EcoSeats: 'EcoSeats',
  BusSeats: 'BusSeats',
  FirstClassSeats: 'FirstClassSeats',
  AirframeRepairCondition: 'AirframeRepairCondition',
  MaintenanceFBOId: 'MaintenanceFBOId',
  RemainingMaintenanceWorkHours: 'RemainingMaintenanceWorkHours',
  Amount: 'Amount',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.AircraftStatusScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name'
};

exports.Prisma.AirportScalarFieldEnum = {
  Id: 'Id',
  ICAO: 'ICAO',
  IATA: 'IATA',
  Description: 'Description',
  Name: 'Name',
  Size: 'Size',
  City: 'City',
  State: 'State',
  CountryCode: 'CountryCode',
  CountryName: 'CountryName',
  CountryEmoji: 'CountryEmoji',
  Latitude: 'Latitude',
  Longitude: 'Longitude',
  HomeWebSiteUrl: 'HomeWebSiteUrl',
  WikiUrl: 'WikiUrl',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.FlightScalarFieldEnum = {
  Id: 'Id',
  FSHubId: 'FSHubId',
  AircraftId: 'AircraftId',
  CompanyId: 'CompanyId',
  Registered: 'Registered',
  Category: 'Category',
  ResultComments: 'ResultComments',
  StartTime: 'StartTime',
  EndTime: 'EndTime',
  EngineOnTime: 'EngineOnTime',
  EngineOffTime: 'EngineOffTime',
  AirborneTime: 'AirborneTime',
  LandedTime: 'LandedTime',
  IntendedFlightLevel: 'IntendedFlightLevel',
  Passengers: 'Passengers',
  Cargo: 'Cargo',
  AddedFuelQty: 'AddedFuelQty',
  IsAI: 'IsAI',
  VerticalSpeedAtTouchdownMpS: 'VerticalSpeedAtTouchdownMpS',
  MaxGForce: 'MaxGForce',
  MinGForce: 'MinGForce',
  MaxBank: 'MaxBank',
  MaxPitch: 'MaxPitch',
  HasStalled: 'HasStalled',
  HasOverspeeded: 'HasOverspeeded',
  XPFlight: 'XPFlight',
  XPFlightBonus: 'XPFlightBonus',
  XPMissions: 'XPMissions',
  CargosTotalWeight: 'CargosTotalWeight',
  PAXCount: 'PAXCount',
  AircraftCurrentFOB: 'AircraftCurrentFOB',
  AircraftCurrentAltitude: 'AircraftCurrentAltitude',
  ActualCruiseAltitude: 'ActualCruiseAltitude',
  ActualConsumptionAtCruiseLevelInLbsPerHour: 'ActualConsumptionAtCruiseLevelInLbsPerHour',
  ActualTotalFuelConsumptionInLbs: 'ActualTotalFuelConsumptionInLbs',
  ActualConsumptionAtCruiseLevelInGalPerHour: 'ActualConsumptionAtCruiseLevelInGalPerHour',
  ActualTASAtCruiseLevel: 'ActualTASAtCruiseLevel',
  ActualCruiseTimeInMinutes: 'ActualCruiseTimeInMinutes',
  ActualPressureAltitude: 'ActualPressureAltitude',
  RegisterState: 'RegisterState',
  WrongFuelDetected: 'WrongFuelDetected',
  WrongWeightDetected: 'WrongWeightDetected',
  TimeOffset: 'TimeOffset',
  StartLatitude: 'StartLatitude',
  StartLongitude: 'StartLongitude',
  StartHeading: 'StartHeading',
  UseFreelanceRouteSchedule: 'UseFreelanceRouteSchedule',
  RestCrewAfterWarp: 'RestCrewAfterWarp',
  Score: 'Score',
  CanResumeOrAbort: 'CanResumeOrAbort',
  EngineOnRealTime: 'EngineOnRealTime',
  EngineOffRealTime: 'EngineOffRealTime',
  LandedRealTime: 'LandedRealTime',
  AirborneRealTime: 'AirborneRealTime',
  DepartureAirportId: 'DepartureAirportId',
  ArrivalIntendedAirportId: 'ArrivalIntendedAirportId',
  ArrivalAlternateAirportId: 'ArrivalAlternateAirportId',
  ArrivalActualAirportId: 'ArrivalActualAirportId',
  VAId: 'VAId',
  MemberId: 'MemberId',
  LastRefresh: 'LastRefresh',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt',
  FlightStatus: 'FlightStatus'
};

exports.Prisma.FlightRouteScalarFieldEnum = {
  Id: 'Id',
  FlightId: 'FlightId',
  MemberId: 'MemberId',
  Route: 'Route',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  Id: 'Id',
  IsEnabled: 'IsEnabled',
  FirstRunCompleted: 'FirstRunCompleted',
  Type: 'Type',
  Status: 'Status',
  CronExpression: 'CronExpression',
  Name: 'Name',
  Description: 'Description',
  Parameters: 'Parameters',
  LastRunAt: 'LastRunAt',
  NextRunAt: 'NextRunAt',
  LastError: 'LastError',
  ExecutionCount: 'ExecutionCount',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  Id: 'Id',
  CompanyId: 'CompanyId',
  DiscordMessageSent: 'DiscordMessageSent',
  IsRead: 'IsRead',
  IsNotification: 'IsNotification',
  ZuluEventTime: 'ZuluEventTime',
  DiscordMessageSentAt: 'DiscordMessageSentAt',
  DiscordMessageId: 'DiscordMessageId',
  Category: 'Category',
  Action: 'Action',
  Description: 'Description',
  CreatedAt: 'CreatedAt',
  UpdatedAt: 'UpdatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ListenerEventStatus = exports.$Enums.ListenerEventStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  SKIPPED: 'SKIPPED'
};

exports.NOTAMStatus = exports.$Enums.NOTAMStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING'
};

exports.FlightStatus = exports.$Enums.FlightStatus = {
  PENDING: 'PENDING',
  FLIGHT: 'FLIGHT',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  WARP: 'WARP'
};

exports.JobType = exports.$Enums.JobType = {
  VIRTUAL_AIRLINE_SYNC: 'VIRTUAL_AIRLINE_SYNC',
  VIRTUAL_AIRLINE_MEMBERS_SYNC: 'VIRTUAL_AIRLINE_MEMBERS_SYNC',
  VIRTUAL_AIRLINE_FLEET_SYNC: 'VIRTUAL_AIRLINE_FLEET_SYNC',
  VIRTUAL_AIRLINE_FLIGHTS_SYNC: 'VIRTUAL_AIRLINE_FLIGHTS_SYNC',
  VIRTUAL_AIRLINE_NOTIFICATION_SYNC: 'VIRTUAL_AIRLINE_NOTIFICATION_SYNC'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  INACTIVE: 'INACTIVE',
  ACTIVE: 'ACTIVE',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.CronExpression = exports.$Enums.CronExpression = {
  EVERY_30_SECONDS: 'EVERY_30_SECONDS',
  EVERY_MINUTE: 'EVERY_MINUTE',
  EVERY_5_MINUTES: 'EVERY_5_MINUTES',
  EVERY_10_MINUTES: 'EVERY_10_MINUTES',
  EVERY_30_MINUTES: 'EVERY_30_MINUTES',
  EVERY_HOUR: 'EVERY_HOUR',
  EVERY_6_HOURS: 'EVERY_6_HOURS',
  EVERY_12_HOURS: 'EVERY_12_HOURS',
  EVERY_DAY_AT_MIDNIGHT: 'EVERY_DAY_AT_MIDNIGHT',
  EVERY_WEEK: 'EVERY_WEEK',
  EVERY_MONTH: 'EVERY_MONTH'
};

exports.Prisma.ModelName = {
  AppConfig: 'AppConfig',
  InviteCode: 'InviteCode',
  DiscordMessage: 'DiscordMessage',
  DiscordMessageTemplate: 'DiscordMessageTemplate',
  DiscordChannelWebhook: 'DiscordChannelWebhook',
  ListenerEvent: 'ListenerEvent',
  ListenerEventSender: 'ListenerEventSender',
  User: 'User',
  UserPrivacySettings: 'UserPrivacySettings',
  Role: 'Role',
  Permission: 'Permission',
  Livery: 'Livery',
  LiveryImage: 'LiveryImage',
  LiveryFile: 'LiveryFile',
  VirtualAirline: 'VirtualAirline',
  VirtualAirlineRole: 'VirtualAirlineRole',
  World: 'World',
  Notam: 'Notam',
  Member: 'Member',
  Company: 'Company',
  Aircraft: 'Aircraft',
  AircraftClass: 'AircraftClass',
  AircraftMaintenance: 'AircraftMaintenance',
  AircraftStatus: 'AircraftStatus',
  Airport: 'Airport',
  Flight: 'Flight',
  FlightRoute: 'FlightRoute',
  Job: 'Job',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
